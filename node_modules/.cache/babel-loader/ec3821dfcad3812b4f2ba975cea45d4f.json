{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, normalizeClass as _normalizeClass, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"for\", \"id\"];\nconst _hoisted_2 = [\"id\", \"aria-label\"];\nconst _hoisted_3 = [\"value\", \"selected\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"font-italic error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"label\", {\n    for: $props.name,\n    id: $props.name,\n    class: \"form-label\"\n  }, _toDisplayString($props.label) + \":\", 9 /* TEXT, PROPS */, _hoisted_1), _withDirectives(_createElementVNode(\"select\", {\n    id: $props.name,\n    class: _normalizeClass($options.selectClass),\n    \"aria-label\": $props.name,\n    onInput: _cache[0] || (_cache[0] = $event => _ctx.$emit('update:modelValue', $event.target.value)),\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.value = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: option.value,\n      selected: _ctx.$event.target.value === option.value\n    }, _toDisplayString(option.name), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, _hoisted_2), [[_vModelSelect, $data.value]]), $props.errors['type'] ? (_openBlock(), _createElementBlock(\"small\", _hoisted_4, \"Blogai įvestas laukas!\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;EAkBiCA,KAAK,EAAC;;;uBAjBrCC,oBAkBM,cAjBJC,oBAAqE;IAA7DC,GAAG,EAAEC,WAAI;IAAGC,EAAE,EAAED,WAAI;IAAEJ,KAAK,EAAC;sBAAgBI,YAAK,IAAG,GAAC,oDAC7DF,oBAcS;IAbJG,EAAE,EAAED,WAAI;IACRJ,KAAK,kBAAEM,oBAAW;IAClB,YAAU,EAAEF,WAAI;IAChBG,OAAK,sCAAEC,UAAK,sBAAsBC,MAAM,CAACC,MAAM,CAACC,KAAK;+DAC7CC,WAAK;yBAEhBX,oBAMSY,6BALqBT,cAAO,GAAzBU,MAAM,EAAEC,KAAK;yBADzBd,oBAMS;MAJJe,GAAG,EAAED,KAAK;MAAGJ,KAAK,EAAEG,MAAM,CAACH,KAAK;MAChCM,QAAQ,EAAET,WAAM,CAACE,MAAM,CAACC,KAAK,KAAKG,MAAM,CAACH;wBAEzCG,MAAM,CAACI,IAAI;wGAPLN,WAAK,KAULR,aAAM,0BAAnBH,oBAAqF,SAArFkB,UAAqF,EAA9B,wBAAsB","names":["class","_createElementBlock","_createElementVNode","for","$props","id","$options","onInput","_ctx","$event","target","value","$data","_Fragment","option","index","key","selected","name","_hoisted_4"],"sourceRoot":"","sources":["C:\\laragon\\www\\vue\\titobu-v2\\src\\components\\app\\form\\BaseSelect.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label :for=\"name\" :id=\"name\" class=\"form-label\">{{ label }}:</label>\r\n    <select\r\n        :id=\"name\"\r\n        :class=\"selectClass\"\r\n        :aria-label=\"name\"\r\n        @input=\"$emit('update:modelValue', $event.target.value)\"\r\n        v-model=\"value\"\r\n    >\r\n      <option\r\n          v-for=\"(option, index) in options\"\r\n          :key=\"index\" :value=\"option.value\"\r\n          :selected=\"$event.target.value === option.value\"\r\n      >\r\n        {{ option.name }}\r\n      </option>\r\n    </select>\r\n    <small v-if=\"errors['type']\" class=\"font-italic error\">Blogai įvestas laukas!</small>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"BaseSelect.vue\",\r\n  data() {\r\n    return {\r\n      value: null\r\n    }\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String\r\n    },\r\n    label: {\r\n      type: String\r\n    },\r\n    options: {\r\n      type: Object,\r\n    },\r\n    errors: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    model: {\r\n      type: Object,\r\n    }\r\n  },\r\n  computed: {\r\n    selectClass() {\r\n      return ['form-control form-field form-select', this.errors.length ? 'error' : null].join(' ')\r\n    },\r\n  },\r\n  watch: {\r\n    model(newValue) {\r\n      console.log('key ', newValue[this.name]);\r\n      this.$forceUpdate();\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}